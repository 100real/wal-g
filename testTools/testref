
func testLz4RoundTrip(t *testing.T, stride, nBytes int) {
	/*** Generate and save random bytes compare against compression-decompression cycle. ***/
	sb := walg.NewStrideByteReader(stride)
	lr := &io.LimitedReader{sb, int64(nBytes)}
	b, err := ioutil.ReadAll(lr)
	buf := bytes.NewBuffer(b)

	/*** Copy generated bytes to another slice to make the test more robust against modifications of "b". ***/
	bCopy := make([]byte, len(b))
	copy(bCopy, b)
	if err != nil {
		t.Fatal()
	}

	/*** Create bundle ***/
	bundle := &walg.Bundle{
		MinSize: int64(1000000000), //MINSIZE = 1GB
	}

	bundle.Tbm = &BufTarBallMaker{
		BaseDir: "test",
		Trim:    "",
		Correct: bCopy,
		Test:    t,
	}
	bundle.NewTarBall()
	tarBall := bundle.GetTarBall()

	tarBall.SetUp()
	tarWriter := tarBall.Tw()

	hdr := &tar.Header{
		Name: "test",
		Mode: 0766,
		Size: int64(nBytes),
	}
	fmt.Println(hdr.Name)
	err = tarWriter.WriteHeader(hdr)

	if err != nil {
		panic(err)
	}

	_, err = io.Copy(tarWriter, buf)
	if err != nil {
		panic(err)
	}

	tarBall.Finish()
}

func TestLz41Byte(t *testing.T)   { testLz4RoundTrip(t, 7924, 1) }
func TestLz41MByte(t *testing.T)  { testLz4RoundTrip(t, 7924, 1024*1024) }
func TestLz410MByte(t *testing.T) { testLz4RoundTrip(t, 7924, 10*1024*1024) }



type BufTarBall struct {
	baseDir string
	trim    string
	nop     bool
	number  int
	size    int64
	cor     []byte
	ti      *walg.BufferTarInterpreter
	tw      *tar.Writer
	t       *testing.T
	b       *bytes.Buffer
}

func (b *BufTarBall) SetUp() {
	if b.tw == nil {
		b.b = new(bytes.Buffer)
		b.tw = tar.NewWriter(lz4.NewWriter(b.b))
	}
}

func (b *BufTarBall) CloseTar() {
	err := b.tw.Close()
	if err != nil {
		panic(err)
	}

	fmt.Println("Closed")
}

func (b *BufTarBall) Finish() {
	b.CloseTar()

	brm := &BufferReaderMaker{b.b, "lz4"}
	b.ti = &walg.BufferTarInterpreter{}
	files := []walg.ReaderMaker{brm}
	walg.ExtractAll(b.ti, files)
	if !bytes.Equal(b.cor, b.ti.Out) {
		b.t.Fail()
	}
}

func (b *BufTarBall) BaseDir() string { return b.baseDir }
func (b *BufTarBall) Trim() string    { return b.trim }
func (b *BufTarBall) Nop() bool       { return b.nop }
func (b *BufTarBall) Number() int     { return b.number }
func (b *BufTarBall) Size() int64     { return b.size }
func (b *BufTarBall) SetSize(i int64) { b.size += i }
func (b *BufTarBall) Tw() *tar.Writer { return b.tw }

type BufTarBallMaker struct {
	number  int
	size    int64
	BaseDir string
	Trim    string
	Correct []byte
	Test    *testing.T
}

func (b *BufTarBallMaker) Make() walg.TarBall {
	b.number += 1
	return &BufTarBall{
		number:  b.number,
		size:    b.size,
		baseDir: b.BaseDir,
		trim:    b.Trim,
		cor:     b.Correct,
		t:       b.Test,
	}
}

